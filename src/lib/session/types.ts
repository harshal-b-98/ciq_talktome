/**
 * Session Management Types
 * CGL-47: Define session schema (session_id, user_metadata, visit_history, interactions)
 */

// ============================================================================
// Session Schema
// ============================================================================

export interface Session {
  sessionId: string;
  createdAt: Date;
  updatedAt: Date;
  expiresAt: Date;
  userMetadata: UserMetadata;
  visitHistory: VisitRecord[];
  interactions: InteractionRecord[];
  personaConfidence?: PersonaConfidence;
  flags: SessionFlags;
}

// ============================================================================
// User Metadata
// ============================================================================

export interface UserMetadata {
  email?: string;
  name?: string;
  company?: string;
  firstVisit: Date;
  lastVisit: Date;
  totalVisits: number;
  referrer?: string;
  utmParams?: UTMParams;
  customFields?: Record<string, unknown>;
}

export interface UTMParams {
  source?: string;
  medium?: string;
  campaign?: string;
  term?: string;
  content?: string;
}

// ============================================================================
// Visit History (CGL-51: Visit summary generation)
// ============================================================================

export interface VisitRecord {
  id: string;
  route: string;
  timestamp: Date;
  duration?: number; // in seconds
  summary: string; // 1-2 line summary generated by Agent
  referrer?: string;
  exitRoute?: string;
}

// ============================================================================
// Interaction Logging (CGL-52: Build interaction logging)
// ============================================================================

export interface InteractionRecord {
  id: string;
  type: InteractionType;
  timestamp: Date;
  route: string;
  details: InteractionDetails;
}

export enum InteractionType {
  CLICK = "click",
  CHAT = "chat",
  FORM_SUBMIT = "form_submit",
  SCROLL = "scroll",
  PAGE_VIEW = "page_view",
  CTA_CLICK = "cta_click",
  DOWNLOAD = "download",
}

export type InteractionDetails =
  | ClickInteraction
  | ChatInteraction
  | FormInteraction
  | ScrollInteraction
  | PageViewInteraction
  | CTAInteraction
  | DownloadInteraction;

export interface ClickInteraction {
  element: string;
  href?: string;
  text?: string;
  position?: { x: number; y: number };
}

export interface ChatInteraction {
  message: string;
  response: string;
  duration: number; // response time in ms
}

export interface FormInteraction {
  formId: string;
  fields: Record<string, unknown>;
  success: boolean;
}

export interface ScrollInteraction {
  depth: number; // percentage scrolled
  maxDepth: number; // max depth reached on page
}

export interface PageViewInteraction {
  route: string;
  timeOnPage: number; // in seconds
}

export interface CTAInteraction {
  ctaText: string;
  ctaHref: string;
  location: string; // where on page
}

export interface DownloadInteraction {
  fileName: string;
  fileType: string;
  fileUrl: string;
}

// ============================================================================
// Persona Confidence (CGL-53: Add persona confidence tracking)
// ============================================================================

export interface PersonaConfidence {
  persona: Persona;
  confidence: number; // 0-1
  signals: PersonaSignal[];
  updatedAt: Date;
}

export enum Persona {
  BRAND_MANAGER = "brand_manager",
  DATA_ANALYST = "data_analyst",
  EXECUTIVE = "executive",
  RESEARCHER = "researcher",
  DEVELOPER = "developer",
  UNKNOWN = "unknown",
}

export interface PersonaSignal {
  type: SignalType;
  value: string;
  weight: number; // contribution to confidence score
  timestamp: Date;
}

export enum SignalType {
  PAGE_VISIT = "page_visit", // visited certain pages
  TIME_SPENT = "time_spent", // time on specific content
  INTERACTION = "interaction", // clicked specific elements
  QUESTION = "question", // asked specific questions in chat
  FORM_DATA = "form_data", // submitted form with job title, etc.
}

// ============================================================================
// Session Flags
// ============================================================================

export interface SessionFlags {
  isBot: boolean;
  isReturningVisitor: boolean;
  hasInteracted: boolean; // any interaction beyond page views
  hasChatted: boolean;
  hasSubmittedForm: boolean;
  emailCaptured: boolean;
}

// ============================================================================
// Session Configuration (CGL-54: Session retrieval optimization)
// ============================================================================

export interface SessionConfig {
  ttl: number; // Time to live in seconds (default: 30 days)
  maxVisitHistory: number; // Max visit records to keep (default: 50)
  maxInteractions: number; // Max interaction records to keep (default: 100)
  enableCompression: boolean; // Compress session data
  keyPrefix: string; // Redis key prefix
}

export const DEFAULT_SESSION_CONFIG: SessionConfig = {
  ttl: 30 * 24 * 60 * 60, // 30 days in seconds
  maxVisitHistory: 50,
  maxInteractions: 100,
  enableCompression: false,
  keyPrefix: "session:",
};

// ============================================================================
// Session Size Limits (CGL-56: Add session size limits to prevent bloat)
// ============================================================================

export interface SessionSizeLimits {
  maxSessionSizeBytes: number; // Max total session size
  maxVisitSummaryLength: number; // Max characters per visit summary
  maxInteractionDetailsSize: number; // Max size of interaction details
}

export const DEFAULT_SIZE_LIMITS: SessionSizeLimits = {
  maxSessionSizeBytes: 100 * 1024, // 100 KB
  maxVisitSummaryLength: 200, // 200 characters
  maxInteractionDetailsSize: 1024, // 1 KB per interaction
};

// ============================================================================
// Cookie Configuration (CGL-48: Secure cookie implementation)
// ============================================================================

export interface CookieConfig {
  name: string;
  httpOnly: boolean;
  secure: boolean;
  sameSite: "strict" | "lax" | "none";
  maxAge: number; // in seconds
  path: string;
}

export const DEFAULT_COOKIE_CONFIG: CookieConfig = {
  name: "ciq_session",
  httpOnly: true,
  secure: process.env.NODE_ENV === "production",
  sameSite: "lax",
  maxAge: 30 * 24 * 60 * 60, // 30 days
  path: "/",
};

// ============================================================================
// Session Operations
// ============================================================================

export interface SessionOperations {
  create: () => Promise<Session>;
  get: (sessionId: string) => Promise<Session | null>;
  update: (sessionId: string, updates: Partial<Session>) => Promise<Session>;
  delete: (sessionId: string) => Promise<void>;
  extend: (sessionId: string) => Promise<void>; // Extend TTL
}

// ============================================================================
// Session Events (for logging and monitoring)
// ============================================================================

export interface SessionEvent {
  type: SessionEventType;
  sessionId: string;
  timestamp: Date;
  details: Record<string, unknown>;
}

export enum SessionEventType {
  SESSION_CREATED = "session_created",
  SESSION_UPDATED = "session_updated",
  SESSION_EXPIRED = "session_expired",
  SESSION_DELETED = "session_deleted",
  VISIT_RECORDED = "visit_recorded",
  INTERACTION_LOGGED = "interaction_logged",
  PERSONA_UPDATED = "persona_updated",
  SIZE_LIMIT_EXCEEDED = "size_limit_exceeded",
}
